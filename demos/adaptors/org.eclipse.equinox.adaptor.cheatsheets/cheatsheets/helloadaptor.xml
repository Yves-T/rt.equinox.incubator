<?xml version="1.0" encoding="UTF-8"?>
<cheatsheet
      title="Create an Equinox Hello Adaptor Hook">
   <intro>
      <description>
         This cheat sheet will demonstrate how to configure PDE and use it to create, modify and test a simple Equinox Hello Adaptor Hook.
      </description>
   </intro>
   <item
         title="Import org.eclipse.osgi">
      <description>
         When developing equinox adaptor hooks you are required to have the org.eclipse.osgi bundle in your workspace.
      </description>
      <subitem
            label="Select &quot;File-&gt;Import&quot; from the main menu and choose &quot;Plug-in Development-&gt;Plug-ins and Fragments&quot; in order to open the Import Plug-ins and Fragments dialog.">
         <command
               required="false"
               serialization="org.eclipse.ui.file.import(importWizardId=org.eclipse.pde.ui.PluginImportWizard)"/>
      </subitem>
      <subitem
            label="In the &quot;Import As&quot; section select &quot;Projects with source folders&quot; and click &quot;Next&quot;.  Select org.eclipse.osgi from the &quot;Plug-ins and Fragments Found&quot; view and click &quot;Add --&gt;&quot; to move it to the &quot;Plug-ins and Fragments to Import&quot; view and click &quot;Finish&quot;.">
      </subitem>
   </item>
   <item
         title="Create framework extension project">
      <description>
         A framework exension project is a fragment project which has org.eclipse.osgi as its host.  This project will be used to implement your adaptor hooks.
      </description>
      <subitem
            label="Select &quot;File-&gt;New-&gt;Other...&quot; and choose &quot;Plug-in Development-&gt;Fragment Project&quot; and click &quot;Next&quot;.">
         <command
               required="false"
               serialization="org.eclipse.ui.newWizard(newWizardId=org.eclipse.pde.ui.NewFragmentWizard)"/>
      </subitem>
      <subitem
            label="For the &quot;Project name&quot; use &quot;org.eclipse.equinox.examples.hellohook&quot;.  For &quot;Target Platform&quot; select &quot;an OSGi framework&quot; and keep &quot;Equinox&quot; as the framework.  Click &quot;Next&quot;.">
      </subitem>
      <subitem
            label="In the &quot;Host Plug-in&quot; section enter &quot;org.eclipse.osgi&quot; as the &quot;Plug-in ID&quot; for the host. Click &quot;Finish&quot;.">
      </subitem>
   </item>
   <item
         title="Create an AdaptorHook class">
      <description>
         The AdaptorHook interface provides hooks into the lifecycle of the Framework adaptor.  This provides hooks into things like initialize, startFramework, stopFramewrok etc.
      </description>
      <subitem
            label="Select &quot;File-&gt;New-&gt;Class&quot;.">
         <command
               required="false"
               serialization="org.eclipse.ui.newWizard(newWizardId=org.eclipse.jdt.ui.wizards.NewClassCreationWizard)"/>
      </subitem>
      <subitem
            label="Make sure the &quot;Source folder&quot; is &quot;org.eclipse.equinox.examples.hellohook/src&quot;.  For the &quot;Package&quot; use &quot;org.eclipse.equinox.examples.hellohook&quot;.  For the &quot;Name&quot; use &quot;HelloAdaptorHook&quot;.  Click the &quot;Add...&quot; to add to the list of &quot;Interfaces&quot;.  Choose &quot;org.eclipse.osgi.baseadaptor.hooks.AdaptorHook&quot; as the interface.  Click &quot;Finish&quot;.">
      </subitem>
      <subitem
            label="A new HelloAdaptorHook class has been created.  Open the class and find the &quot;frameworkStart&quot; method.">
      </subitem>
      <subitem
            label="Add code to print a message in the frameworkStart method (e.g. System.out.println(&quot;Howdy AdaptorHook&quot;);).">
      </subitem>
   </item>
   <item
         title="Create a HookConfigurator class">
      <description>
         A HookConfigurator implementation configures you hooks with the HookRegistry of the framework.  Your hooks will not be used unless you add them with a HookConfigurator.
      </description>
      <subitem
            label="Select &quot;File-&gt;New-&gt;Class&quot;">
         <command
               required="false"
               serialization="org.eclipse.ui.newWizard(newWizardId=org.eclipse.jdt.ui.wizards.NewClassCreationWizard)"/>
      </subitem>
      <subitem
            label="Make sure the &quot;Source folder&quot; is &quot;org.eclipse.equinox.examples.hellohook/src&quot;.  For the &quot;Package&quot; use &quot;org.eclipse.equinox.examples.hellohook&quot;.  For the &quot;Name&quot; use &quot;HelloConfigurator&quot;.  Click the &quot;Add...&quot; to add to the list of &quot;Interfaces&quot;.  Choose &quot;org.eclipse.osgi.baseadaptor.HookConfigurator&quot; as the interface.  Click &quot;Finish&quot;.">
      </subitem>
   </item>
   <item
         title="Create a hookconfigurators.properties file">
      <description>
         The hookconfigurators.properties file is used to list all of your hook configurators that you want to be called by the HookRegistry.
      </description>
      <subitem
            label="Select &quot;File-&gt;New-&gt;File&quot;">
         <command
               required="false"
               serialization="org.eclipse.ui.newWizard(newWizardId=org.eclipse.ui.wizards.new.file)"/>
      </subitem>
      <subitem
            label="Select the root of the &quot;org.eclipse.equinox.examples.hellohook&quot; project as the parent folder.  For the &quot;File name&quot; use &quot;hookconfigurators.properties&quot;.  Click &quot;Finish&quot;.">
      </subitem>
      <subitem
            label="The properties file editor should be opened to the &quot;hookconfigurators.properties&quot; file.  If the editor is not open then open it now.">
      </subitem>
      <subitem
            label="Add &quot;hook.configurators=org.eclipse.equinox.examples.hellohook.HelloConfigurator&quot; to the file and save.">
      </subitem>
   </item>
   <item
         title="Add HelloAdaptorHook to the HookRegistry">
      <description>
         The HelloConfigurator must add an instance of the HelloAdaptorHook to the HookRegistry.
      </description>
      <subitem
            label="Open the HelloConfigurator class and edit the addHooks method to have &quot;hookRegistry.addAdaptorHook(new HelloAdaptorHook());&quot;">
      </subitem>
   </item>
   <item
         title="Create a launch configuration">
      <description>
         The launch configuration will be used to launch the Equinox Framework with your new adaptor hook configured in.
      </description>
      <subitem
            label="Select &quot;Run-&gt;Run Configurations...&quot;">
         <command
               required="false"
               serialization="org.eclipse.debug.ui.commands.OpenRunConfigurations"/>
      </subitem>
      <subitem
            label="Select &quot;Eclipse Application&quot; and click the &quot;New launch configuration&quot; icon (hint it looks like a blank document with a little + sign in the upper right corner).">
      </subitem>
      <subitem
            label="Name the new configuration &quot;HelloAdaptorHook&quot;.  Select the &quot;Arguments&quot; tab and add &quot;-Dosgi.framework.extensions=org.eclipse.equinox.examples.hellohook&quot; to the VM arguments.">
      </subitem>
      <subitem
            label="Click &quot;Run&quot;.  This should launch an instance of eclipse using your adaptor hook.  The console should display the text you printed to System.out.">
      </subitem>
   </item>
</cheatsheet>
